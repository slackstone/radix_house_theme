<?php

/**
 * @file
 * Theme functions.
 */

// Include all files from the includes directory.
$includes_path = dirname(__FILE__) . '/includes/*.theme';
foreach (glob($includes_path) as $file) {
  require_once dirname(__FILE__) . '/includes/' . basename($file);
}

// Include the settings file if it exists.
if (file_exists(__DIR__ . '/radix_rsvp.settings.php')) {
  include_once __DIR__ . '/radix_rsvp.settings.php';
}

/**
 * Helper function to load logos and site name images from theme settings.
 */
function _radix_rsvp_load_images() {
  // Define the sizes for the images: mobile, tablet, desktop.
  $sizes = ['mobile', 'tablet', 'desktop'];
  $images = [];

  // Loop through each size to fetch logos and site name images.
  foreach ($sizes as $size) {
    // Load logos.
    $logo_fid = theme_get_setting("rsvp_logo_{$size}");
    $images["rsvp_logo_{$size}"] = !empty($logo_fid) ? _radix_rsvp_get_file_url(is_array($logo_fid) ? $logo_fid[0] : $logo_fid) : '';

    // Load inverted logos for scroll effects.
    $logo_invert_fid = theme_get_setting("rsvp_logo_{$size}_invert");
    $images["rsvp_logo_{$size}_invert"] = !empty($logo_invert_fid) ? _radix_rsvp_get_file_url(is_array($logo_invert_fid) ? $logo_invert_fid[0] : $logo_invert_fid) : '';

    // Load site name images.
    $site_name_fid = theme_get_setting("rsvp_site_name_{$size}");
    $images["rsvp_site_name_{$size}"] = !empty($site_name_fid) ? _radix_rsvp_get_file_url(is_array($site_name_fid) ? $site_name_fid[0] : $site_name_fid) : '';
 
    // Load inverted site name images for scroll effects.
    $site_name_invert_fid = theme_get_setting("rsvp_site_name_{$size}_invert");
    $images["rsvp_site_name_{$size}_invert"] = !empty($site_name_invert_fid) ? _radix_rsvp_get_file_url(is_array($site_name_invert_fid) ? $site_name_invert_fid[0] : $site_name_invert_fid) : '';
  }

  // Load consolidated ALT texts.
  $images['rsvp_logo_alt_text'] = theme_get_setting('rsvp_logo_alt_text');
  $images['rsvp_logo_text_alt_text'] = theme_get_setting('rsvp_logo_text_alt_text');

  return $images;
}

/**
 * Helper function to get the URL of a file by its file ID (FID).
 */
function _radix_rsvp_get_file_url($fid) {
  $file = \Drupal\file\Entity\File::load($fid);
  return $file ? $file->createFileUrl() : '';
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function radix_rsvp_preprocess_block(&$variables) {
  // Add is_front variable to block templates.
  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();

  // Fetch logo and site name images and ALT texts.
  $images = _radix_rsvp_load_images();

  // Pass images and ALT texts to the block template.
  $variables = array_merge($variables, $images);

  // Check if the block is the FullCalendar block by its plugin ID.
  if ($variables['plugin_id'] == 'views_block:calendar-block_1') {
    $variables['#attached']['library'][] = 'radix_rsvp/fullcalendar_custom_fix';  // Attach the FullCalendar fix library.
  }

// Check if the block is a Splash Image block by its plugin ID.

if ($variables['plugin_id'] == 'block_content:splash_image') {
  \Drupal::logger('splash_image_debug')->debug('Condition met: plugin_id matches block_content:splash_image');
} else {
  \Drupal::logger('splash_image_debug')->debug('Condition not met: plugin_id does not match block_content:splash_image');
}



// Check if the block is a Splash Image block by its plugin ID.
 // Check if the block is a Splash Image block type.
  if (isset($variables['content']['#block_content']) && $variables['content']['#block_content']->bundle() == 'splash_image') {
    $block_content = $variables['content'];

    // Helper function to extract file URLs from Media fields.
    $getMediaFileUrl = function ($field) {
      if (!empty($field['#items'])) {
        $media_entity = $field['#items']->entity;
        if ($media_entity && $media_entity->hasField('field_media_image') && !$media_entity->get('field_media_image')->isEmpty()) {
          $file = $media_entity->get('field_media_image')->entity;
          if ($file) {
            // Use the file_url_generator service to create an absolute URL.
            return \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
          }
        }
      }
      return null;
    };

    // Extract URLs for each field.
    $variables['splash_landscape_webp'] = $getMediaFileUrl($block_content['field_splash_landscape_webp'] ?? []);
    $variables['splash_landscape_fallback'] = $getMediaFileUrl($block_content['field_splash_landscape_fallback'] ?? []);
    $variables['splash_portrait_webp'] = $getMediaFileUrl($block_content['field_splash_portrait_webp'] ?? []);
    $variables['splash_portrait_fallback'] = $getMediaFileUrl($block_content['field_splash_portrait_fallback'] ?? []);
  }

}

/**
 * Implements hook_preprocess_HOOK() for the page template.
 */
function radix_rsvp_preprocess_page(&$variables) {
  // Step 1: Fetch logo and site name images.
  $images = _radix_rsvp_load_images();

  // Ensure $images is an array and contains valid data before adding to $variables.
  if (is_array($images)) {
    foreach ($images as $key => $value) {
      $variables[$key] = $value;
    }
  }
//  Debug: Log or print the images to ensure they are loaded.
  \Drupal::logger('radix_rsvp')->debug('<pre>' . print_r($images, TRUE) . '</pre>');

  // Step 2: Load the main menu tree.
  $menu_name = 'main';
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

  // Check if we successfully obtained the menu tree parameters.
  if (!empty($parameters)) {
    // Load the menu tree using the parameters.
    $tree = $menu_tree->load($menu_name, $parameters);

    // Check if the menu tree is valid before building.
    if (!empty($tree)) {
      $menu = $menu_tree->build($tree);
      $variables['navbar_menu'] = $menu;

      // Log for debugging.
      \Drupal::logger('radix_rsvp')->info('Navbar menu loaded successfully for menu: @menu', ['@menu' => $menu_name]);
    } else {
      \Drupal::logger('radix_rsvp')->warning('The menu tree for @menu is empty or not accessible.', ['@menu' => $menu_name]);
    }
  } else {
    \Drupal::logger('radix_rsvp')->warning('Failed to get menu parameters for @menu.', ['@menu' => $menu_name]);
  }
}

/**
 * Implements hook_preprocess_html().
 */
function radix_rsvp_preprocess_html(&$variables) {
  // Define the color keys and their defaults.
  $colors = [
    'dark_primary' => '#E2E8F0',
    'accent_primary' => '#E2E8F0',
    'absolute_dark' => '#E2E8F0',
    'grey' => '#E2E8F0',
    'accent_light' => '#F2F6FB',
    'trace_primary' => '#EDF2F7',
    'trace_accent' => '#E2E8F0',
  ];

  // Build the CSS variable string.
  $inline_css = ":root {\n";
  foreach ($colors as $key => $default) {
    // Get the overridden value from theme settings or use the default.
    $value = theme_get_setting("color_{$key}") ?: $default;

    // Convert underscores to hyphens in the CSS variable name.
    $css_var_name = '--color-' . str_replace('_', '-', $key);

    $inline_css .= "  {$css_var_name}: {$value};\n";
  }
  $inline_css .= "}";

  // Attach the inline CSS to the <head> of the page.
  $variables['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'style',
      '#value' => $inline_css,
    ],
    'radix_rsvp-inline-colors',
  ];
}
